{"version":3,"sources":["../../Scripts/ParkingLot/module.js","../../Scripts/ParkingLot/Controllers/ParkingLotController.js","../../Scripts/ParkingLot/Factories/parkingLotFactory.js"],"names":["angular","module","parkingLotController","$scope","parkingLotFactory","$location","getParkingLots","isBusy","getAllParkingLots","then","response","parkingLots","alert","delete","id","delteParkingLot","result","error","add","path","singleparkingLotController","$routeParams","parkingLot","existsParkingLot","getParkingLotById","console","log","back","save","updateParkingLot","copy","addParkingLot","config","$routeProvider","when","controller","templateUrl","otherwise","redirectTo","$inject","$http","$q","_findParkingLot","found","$","each","_parkingLots","i","item","baseUrl","_isInit","_isReady","_getAllParkingLots","deferred","defer","get","data","resolve","reject","promise","post","newlyCreatedParkingLot","splice","isReady","put","factory"],"mappings":"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","file":"app.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    angular.module('appParkingLot', ['ngRoute']);\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('appParkingLot')\r\n        .config(['$routeProvider', function ($routeProvider) {\r\n            $routeProvider\r\n                .when(\"/\", {\r\n                    controller: \"parkingLotController\",\r\n                    templateUrl: \"../views/parkingLots.html\"\r\n                })\r\n                .when(\"/parkingLot\", {\r\n                    controller: \"parkingLotController\",\r\n                    templateUrl: \"../views/parkingLots.html\"\r\n                })\r\n                .when(\"/editParkingLot/:id\", {\r\n                    controller: \"singleparkingLotController\",\r\n                    templateUrl: \"/views/editParkingLot.html\"\r\n                })\r\n                .when(\"/addParkingLot\", {\r\n                    controller: \"singleparkingLotController\",\r\n                    templateUrl: \"/views/editParkingLot.html\"\r\n                })\r\n                .otherwise(\r\n                {\r\n                    redirectTo: \"/\"\r\n                });\r\n        }])\r\n        .controller('parkingLotController', parkingLotController)\r\n        .controller('singleparkingLotController', singleparkingLotController);\r\n\r\n    parkingLotController.$inject = ['$scope', 'parkingLotFactory', '$location'];\r\n    singleparkingLotController.$inject = ['$scope', '$location', '$routeParams', 'parkingLotFactory'];\r\n\r\n    function parkingLotController($scope, parkingLotFactory, $location) {\r\n        $scope.parkingLots = [];\r\n        $scope.isBusy = false;\r\n        getParkingLots();\r\n\r\n        $scope.delete = function (id) {\r\n            parkingLotFactory.delteParkingLot(id)\r\n            .then(function (result) {\r\n                getParkingLots();\r\n            },\r\n            function (error) {\r\n                alert(\"Could not delte the parking lot \" + error);\r\n            });\r\n        };\r\n\r\n        $scope.add = function () {\r\n            $location.path('/addParkingLot');\r\n        };\r\n\r\n        function getParkingLots() {\r\n            $scope.isBusy = true;\r\n\r\n            parkingLotFactory.getAllParkingLots()\r\n                .then(function (response) {\r\n                    $scope.parkingLots = parkingLotFactory.parkingLots;\r\n                },\r\n                function () {\r\n                    alert(\"Could not load parking Lots\");\r\n                })\r\n                .then(function () {\r\n                    $scope.isBusy = false;\r\n                });\r\n        };\r\n    };\r\n\r\n    function singleparkingLotController($scope, $location, $routeParams, parkingLotFactory) {\r\n        $scope.parkingLot = {};\r\n        $scope.existsParkingLot = false;\r\n\r\n        if ($routeParams.id) {\r\n            parkingLotFactory.getParkingLotById($routeParams.id)\r\n               .then(function (response) {\r\n                   $scope.parkingLot = response;\r\n                   $scope.existsParkingLot = true;\r\n               },\r\n               function (error) {\r\n                   alert(\"Error retrieving parking lot\" + error);\r\n                   console.log(error);\r\n                   $scope.back();\r\n               });\r\n        }\r\n\r\n        $scope.back = function () {\r\n            $location.path('/');\r\n        };\r\n\r\n        $scope.save = function () {\r\n            if ($routeParams.id && $scope.existsParkingLot) {\r\n                parkingLotFactory.updateParkingLot($scope.parkingLot)\r\n                    .then(function (result) {\r\n                        angular.copy(result, $scope.parkingLot);\r\n                        $scope.back();\r\n                    },\r\n                    function (error) {\r\n                        alert(\"Could not save the parking lot \" + error);\r\n                    });\r\n            } else {\r\n                parkingLotFactory.addParkingLot($scope.parkingLot)\r\n                    .then(function (result) {\r\n                        angular.copy(result, $scope.parkingLot);\r\n                        $scope.back();\r\n                    },\r\n                    function (error) {\r\n                        alert(\"Could not save the parking lot \" + error);\r\n                    });\r\n            }\r\n        };\r\n    };\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('appParkingLot')\r\n        .factory('parkingLotFactory', parkingLotFactory);\r\n\r\n    parkingLotFactory.$inject = ['$http', '$q'];\r\n\r\n    function parkingLotFactory($http, $q) {\r\n        var baseUrl = \"http://localhost:5000/api/parkingLot\";\r\n        var _parkingLots = [];\r\n        var _isInit = false;\r\n\r\n        var _isReady = function () {\r\n            return _isInit;\r\n        }\r\n\r\n        var _getAllParkingLots = function () {\r\n\r\n            var deferred = $q.defer();\r\n            $http.get(baseUrl)\r\n            .then(function (result) {\r\n                angular.copy(result.data, _parkingLots);\r\n                _isInit = true;\r\n                deferred.resolve();\r\n            },\r\n            function (error) {\r\n                deferred.reject();\r\n                console.error(error);\r\n            });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        var _addParkingLot = function (parkingLot) {\r\n\r\n            var deferred = $q.defer();\r\n            $http.post(baseUrl, parkingLot)\r\n            .then(function (result) {\r\n                var newlyCreatedParkingLot = result.data;\r\n\r\n                _parkingLots.splice(0, 0, newlyCreatedParkingLot);\r\n                deferred.resolve(newlyCreatedParkingLot);\r\n            },\r\n            function (error) {\r\n                deferred.reject();\r\n                console.error(error);\r\n            })\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        function _findParkingLot(id) {\r\n            var found = null;\r\n\r\n            $.each(_parkingLots, function (i, item) {\r\n                if (item.id == id) {\r\n                    found = item;\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            return found;\r\n        }\r\n\r\n        var _getParkingLotById = function (id) {\r\n\r\n            var deferred = $q.defer();\r\n\r\n            if (_isReady()) {\r\n                var parkingLot = _findParkingLot(id);\r\n                if (parkingLot) {\r\n                    deferred.resolve(parkingLot);\r\n                } else {\r\n                    deferred.reject();\r\n                }\r\n            } else {\r\n                $http.get(baseUrl + \"/\" + id)\r\n                    .then(function (result) {\r\n                        deferred.resolve(parkingLot);\r\n                    },\r\n                    function (error) {\r\n                        deferred.reject(error);\r\n                        console.error(error);\r\n                    });\r\n            }\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        var _updateParkingLot = function (parkingLot) {\r\n\r\n            var deferred = $q.defer();\r\n\r\n            $http.put(baseUrl, parkingLot)\r\n            .then(function (result) {\r\n                deferred.resolve(result.data);\r\n                _getAllParkingLots();\r\n            },\r\n            function (error) {\r\n                deferred.reject();\r\n                console.error(error);\r\n            })\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        var _delteParkingLot = function (id) {\r\n\r\n            var deferred = $q.defer();\r\n\r\n            $http.delete(baseUrl + \"/\" + id)\r\n            .then(function (result) {\r\n                deferred.resolve(result);\r\n                _getAllParkingLots();\r\n            },\r\n            function (error) {\r\n                deferred.reject();\r\n                console.error(error);\r\n            })\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        return {\r\n            parkingLots: _parkingLots,\r\n            getAllParkingLots: _getAllParkingLots,\r\n            addParkingLot: _addParkingLot,\r\n            isReady: _isReady,\r\n            getParkingLotById: _getParkingLotById,\r\n            updateParkingLot: _updateParkingLot,\r\n            delteParkingLot: _delteParkingLot\r\n        };\r\n    }\r\n})();"]}